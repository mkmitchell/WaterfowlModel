# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# WaterfowlModel.py
# Created on: 2017-05-16 15:23:10.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: WaterfowlModel <Workspace> <output> <Imported_natural_flood> <Public_input> <Distirbance_input> 
# Description: The change from ArcMap to ArcPro changed a lot of functions with how models are stored.  I'm attempting to work through more changes by leaving the model in python
# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
import arcpy, os, sys, getopt

# Required parameters
# Name for the feature classes within the geodatabase
mav = "mav"
wgcp = "wgcp"
naturalflood = "Natural_flood"
publicinput = "Public_output"
stateboundary = "state_boundaries"

arcpy.env.overwriteOutput = True;
# Setup model specifics
def runModel (region, workspace, gdb):

	gdb = os.path.join(workspace, gdb)
	scratchgdb = os.path.join(workspace, region + "_scratch.gdb")
	if (region == 'mav'):
		aoi = os.path.join(gdb, mav)
	else:
		aoi = os.path.join(gdb, wgcp)
		
	#setup databases
	if not (os.path.exists(scratchgdb)):
                print("Creating scratch GDB")
		arcpy.CreateFileGDB_management(workspace, region + "_scratch.gdb")
	else:
                print("Scratch GDB already exists.  Using it")

        #check for setup files
        if not (arcpy.Exists(aoi)):
                print("Area of interest '" + aoi + "' does not exist")
                sys.exit(2)
        if not (arcpy.Exists(os.path.join(gdb, naturalflood))):
                print("Natural Flood '" + naturalflood + "' does not exist")
                sys.exit(2)
        if not (arcpy.Exists(os.path.join(gdb, publicinput))):
                print("Public input '" + publicinput + "' does not exist")
                sys.exit(2)
        if not (arcpy.Exists(os.path.join(gdb, stateboundary))):
                print("State boundaries '" + stateboundary + "' does not exist")
                sys.exit(2)


        pubinput = os.path.join(gdb, publicinput)
        stateinput = os.path.join(gdb, stateboundary)
        #Doing the work
        # Process: Erase
        print "Erasing public land data from flood"
        inmemerase = arcpy.Erase_analysis(os.path.join(gdb,naturalflood), pubinput, "in_memory/erase", "")
        # Merge
        print "Merging Natural flood (no public lands) with public lands"
        pubflood = arcpy.Merge_management([inmemerase, pubinput], os.path.join(scratchgdb, "pubflood"))
        # Feature class to feature class for proper field mapping and cleanup
        print "Cleaning up feature class and correcting fields"
        publicAndFlood = arcpy.FeatureClassToFeatureClass_conversion(pubflood, scratchgdb, "Public_and_Natural", "\"HABITAT_TY\" <> '' AND \"ACRES\" >=1", "BCR_NAME \"BCR_NAME\" true true false 16 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,BCR_NAME,-1,-1;STATE \"STATE\" true true false 2 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,STATE,-1,-1;MANAGING_A \"MANAGING_A\" true true false 35 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,MANAGING_A,-1,-1;MANAGEMENT \"MANAGEMENT\" true true false 30 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,MANAGEMENT,-1,-1;COMMON_NAM \"COMMON_NAM\" true true false 30 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,COMMON_NAM,-1,-1;ACRES \"ACRES\" true true false 19 Double 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,ACRES,-1,-1;HECTARES \"HECTARES\" true true false 19 Double 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,HECTARES,-1,-1;HABITAT_TY \"HABITAT_TY\" true true false 16 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,HABITAT_TY,-1,-1;COVER_TYPE \"COVER_TYPE\" true true false 16 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,COVER_TYPE,-1,-1;Z_HARVESTE \"Z_HARVESTE\" true true false 19 Double 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,Z_HARVESTE,-1,-1;Z_RED_OAK_ \"Z_RED_OAK_\" true true false 19 Double 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,Z_RED_OAK_,-1,-1;FUNCTIONAL \"FUNCTIONAL\" true true false 1 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,FUNCTIONAL,-1,-1;DED \"DED\" true true false 19 Double 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,DED,-1,-1;WATERSHED \"WATERSHED\" true true false 45 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,WATERSHED,-1,-1;OWNER \"OWNER\" true true false 20 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,OWNER,-1,-1;MANAGE \"MANAGE\" true true false 10 Long 0 10 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,MANAGE,-1,-1;BASIN__HUC \"BASIN__HUC\" true true false 29 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,BASIN__HUC,-1,-1;PROTECTION \"PROTECTION\" true true false 20 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,PROTECTION,-1,-1;SEEDINDEX \"SEEDINDEX\" true true false 19 Double 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,SEEDINDEX,-1,-1;WTRCNTRL \"WTRCNTRL\" true true false 5 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,WTRCNTRL,-1,-1;PUMP \"PUMP\" true true false 5 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,PUMP,-1,-1;REF_HAB \"REF_HAB\" true true false 5 Text 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,REF_HAB,-1,-1;REFHABAC \"REFHABAC\" true true false 19 Double 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,REFHABAC,-1,-1;DEDCALC \"DEDCALC\" true true false 13 Float 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,DEDCALC,-1,-1;Shape_Leng \"Shape_Leng\" true true false 19 Double 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,Shape_Leng,-1,-1;Shape_Area \"Shape_Area\" true true false 19 Double 0 0 ,First,#," + scratchgdb + " \\Public_and_Natural_temp.shp,Shape_Area,-1,-1", "")
        # Clipping state boundary with focus area
        print "Clipping state boundary aoi with flood, and public lands"
        stateclipped = arcpy.Clip_analysis(stateinput, aoi, "in_memory/stateclip")
        pubfloodclipped = arcpy.Clip_analysis(stateclipped, publicAndFlood, "in_memory/mainaoi")

        print "Everything looks good"
	sys.exit()


# # Process: Union
# arcpy.Union_analysis("'D:\\GIS\\tools\\Waterfowl model\\wgcp_workspace\\Public_and_Natural.shp' #;# #", Public_and_Natural_Union_shp, "ALL", "", "GAPS")

# # Process: Select
# arcpy.Select_analysis(Public_and_Natural_Union_shp, Public_and_Natural_Union_Sel, "STATE <> ''")

# # Process: Add Field
# arcpy.AddField_management(Public_and_Natural_Union_Sel, "FIXID", "LONG", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# # Process: Calculate Field
# arcpy.CalculateField_management(Public_and_Natural_Union_Sel__2_, "FIXID", "!OBJECTID!", "PYTHON_9.3", "")

# # Process: Calculate Field (2)
# arcpy.CalculateField_management(Public_and_Natural_Union_Sel__3_, "HABITAT_TY", "Calc( !HABITAT_TY!)", "PYTHON_9.3", "def Calc(hab):\\n  if (hab.lower() == 'woody vegetation'):\\n    return 'Woody wetlands'\\n  else:\\n    return hab")

# # Process: Calculate Field (3)
# arcpy.CalculateField_management(Public_and_Natural_shp__5_, "HABITAT_TY", "Calc( !HABITAT_TY!)", "PYTHON_9.3", "def Calc(hab):\\n  return hab.lower()")

# # Process: Calculate Field (4)
# arcpy.CalculateField_management(Public_and_Natural_shp__6_, "COVER_TYPE", "Calc( !COVER_TYPE!)", "PYTHON_9.3", "def Calc(cover):\\n  cover = cover.lower()\\n  changeme = ['reforested', 'forested swamp', 'hardwoods']\\n  if cover in changeme:\\n    return 'woody wetlands'\\n  else:\\n    return cover")

# # Process: Calculate Field (5)
# arcpy.CalculateField_management(Public_and_Natural_shp__7_, "STAT_CORR", "Calc( !STAT_CORR!)", "PYTHON_9.3", "def Calc(stat):\\n  if stat == '':\\n    return 'OWH-7-17'\\n  else:\\n    return stat")

# # Process: Add Geometry Attributes
# arcpy.AddGeometryAttributes_management(Public_and_Natural_shp__8_, "AREA", "", "ACRES", "PROJCS['WGS_1984_UTM_Zone_15N',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-93.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]")

# # Process: Calculate Field (6)
# arcpy.CalculateField_management(Public_and_Natural_shp__8_, "ACRES", "!POLY_AREA!", "PYTHON_9.3", "")

# # Process: Calculate Field (7)
# arcpy.CalculateField_management(Public_and_Natural_Union_Sel__4_, "HECTARES", "!ACRES!*0.404686", "PYTHON_9.3", "")

# # Process: Calculate Field (8)
# arcpy.CalculateField_management(Public_and_Natural_shp__10_, "STAT_CORR", "Calc( !STAT_CORR!, !STAT_CORR_1!)", "PYTHON_9.3", "def Calc (stat1, stat2):\\n  if 'W' in stat1 or 'C' in stat1:\\n    return stat1\\n  elif 'W' in stat2 or 'C' in stat2:\\n    return stat2\\n  else:\\n    return 'OWH-7-17'")

# # Process: Table to Table (2)
# arcpy.TableToTable_conversion(Public_and_Natural_Union_Sel__6_, Workspace, "temp_table.dbf", "", "STATE \"STATE\" true true false 18 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,STATE,-1,-1;BCR_NAME \"BCR_NAME\" true true false 27 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,BCR_NAME,-1,-1;ACRES \"ACRES\" true true false 19 Double 3 18 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,ACRES,-1,-1;HECTARES \"HECTARES\" true true false 19 Double 3 18 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,HECTARES,-1,-1;WATERSHED \"WATERSHED\" true true false 45 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,WATERSHED,-1,-1;Z_RED_OAK_ \"Z_RED_OAK_\" true true false 19 Double 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,Z_RED_OAK_,-1,-1;HABITAT_TY \"HABITAT_TY\" true true false 16 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,HABITAT_TY,-1,-1;Z_HARVESTE \"Z_HARVESTE\" true true false 19 Double 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,Z_HARVESTE,-1,-1;MANAGING_A \"MANAGING_A\" true true false 254 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,MANAGING_A,-1,-1;COMMON_NAM \"COMMON_NAM\" true true false 100 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,COMMON_NAM,-1,-1;MANAGEMENT \"MANAGEMENT\" true true false 100 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,MANAGEMENT,-1,-1;FUNCTIONAL \"FUNCTIONAL\" true true false 1 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,FUNCTIONAL,-1,-1;OWNER \"OWNER\" true true false 20 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,OWNER,-1,-1;COVER_TYPE \"COVER_TYPE\" true true false 254 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,COVER_TYPE,-1,-1;MANAGE \"MANAGE\" true true false 5 Short 0 5 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,MANAGE,-1,-1;BASIN__HUC \"BASIN__HUC\" true true false 29 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,BASIN__HUC,-1,-1;PROTECTION \"PROTECTION\" true true false 20 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,PROTECTION,-1,-1;SEEDINDEX \"SEEDINDEX\" true true false 19 Double 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,SEEDINDEX,-1,-1;WTRCNTRL \"WTRCNTRL\" true true false 5 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,WTRCNTRL,-1,-1;PUMP \"PUMP\" true true false 5 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,PUMP,-1,-1;REF_HAB \"REF_HAB\" true true false 5 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,REF_HAB,-1,-1;REFHABAC \"REFHABAC\" true true false 19 Double 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,REFHABAC,-1,-1;DEDCALC \"DEDCALC\" true true false 13 Float 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,DEDCALC,-1,-1;STAT_CORR \"STAT_CORR\" true true false 50 Text 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,STAT_CORR,-1,-1;Shape_Leng \"Shape_Leng\" true true false 19 Double 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,Shape_Leng,-1,-1;Shape_Area \"Shape_Area\" true true false 19 Double 0 0 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,Shape_Area,-1,-1;FIXID \"FIXID\" true true false 10 Long 0 10 ,First,#,D:\\GIS\\projects\\Waterfowl model\\Input_testcase\\finaltestout\\Public_and_Natural.shp,FIXID,-1,-1", "")

# # Process: ConvertToCSV
# arcpy.gp.ToCSV(temp_table_dbf, output)

# # Process: Delete
# arcpy.Delete_management(output, "")

def main(argv):
   aoi = ''
   inworkspace = ''
   ingdb = ''
   try:
      opts, args = getopt.getopt(argv,"hr:w:g:",["region=","workspace="])
   except getopt.GetoptError:
           print 'waterfowlmodel.py -r <MAV or WGCP> -w <workspace folder where geodatabases should reside> -g <geodatabase name>'
           sys.exit(2)
   for opt, arg in opts:
      if opt == '-h':
         print 'waterfowlmodel.py -r <MAV or WGCP> -w <workspace folder where geodatabases should reside> -g <geodatabase name>'
         sys.exit()
      elif opt in ("-r", "--region"):
         aoi = arg
         if aoi.lower() not in ("mav", "wgcp"):
                 print 'Region is incorrect'
                 sys.exit(2)
      elif opt in ("-w", "--workspace"):
         inworkspace = arg
         if not (os.path.exists(inworkspace)):
                 print "Workspace GDB doesn't exist.  Please create it"
                 sys.exit(2)
      elif opt in ("-g", "--geodatabase"):
         ingdb = arg
         if not (os.path.exists(inworkspace)):
                 print "GDB doesn't exist.  Please create it"
                 sys.exit(2)
   print 'Region of interest: ', aoi
   print 'Workspace: ', inworkspace
   print 'GDB: ', ingdb
   runModel(aoi.lower(), inworkspace, ingdb)

if __name__ == "__main__":
   main(sys.argv[1:])

